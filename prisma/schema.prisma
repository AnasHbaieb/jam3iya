generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id                Int      @id @default(autoincrement())
  name              String
  description       String?
  imageUrl          String?
  shortDescription  String?
  secondaryImageUrl String?
  category          String
  rang              Int      @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model ContentPost {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  rang        Int      @default(0)
  category    String?
  date        String?
  excerpt     String?
  videoUrl    String?
}

model CarouselImage {
  id        Int      @id @default(autoincrement())
  imageUrl  String
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model contactMessage {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PageContent {
  id        Int            @id @default(autoincrement())
  pageName  String         @unique
  content   String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  documents PageDocument[]
}

model PageDocument {
  id            Int         @id @default(autoincrement())
  title         String
  url           String
  pageContentId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  pageContent   PageContent @relation(fields: [pageContentId], references: [id], onDelete: Cascade)
}

model VolunteerApplication {
  id                 Int      @id @default(autoincrement())
  fullName           String
  ageCategory        String
  gender             String
  phone              String
  email              String   @unique
  educationLevel     String
  previousExperience String?
  organizationName   String?
  interestAreas      String[]
  createdAt          DateTime @default(now())
}

enum Role {
  USER
  ADMIN
}
